from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import models
import schemas
from schemas import PasswordResetRequest, PasswordResetConfirm
from database import get_db
from utils.security import get_password_hash
from utils.messaging import rabbit_broker  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º rabbit_broker, –Ω–µ rabbit_router
from schemas import EmailVerification
from fastapi import HTTPException
from sqlalchemy import select
import random

router = APIRouter()


@router.post("/register", response_model=schemas.UserResponse, description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def create_user(user_in: schemas.UserCreate, db: AsyncSession = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = await db.execute(select(models.User).where(models.User.username == user_in.username))
    existing_user = existing_user.scalar_one_or_none()

    if existing_user:
        raise HTTPException(status_code=400, detail="–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    existing_email = await db.execute(
        select(models.User).where(models.User.email == user_in.email)
    )
    existing_email = existing_email.scalar_one_or_none()

    if existing_email:
        raise HTTPException(status_code=400, detail="–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    verification_code = str(random.randint(100000, 999999))

    user = models.User(
        username=user_in.username,
        email=str(user_in.email),
        hashed_password=get_password_hash(user_in.password),
        verification_code = verification_code
    )

    db.add(user)
    await db.commit()
    await db.refresh(user)

    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ RabbitMQ
    try:
        await rabbit_broker.publish(
            {
                "username": user_in.username,
                "email": user_in.email,
                "code": verification_code  # –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ—Ç –∂–µ –∫–æ–¥!
            },
            routing_key="user.registered"
        )
        print(f"Message sent to RabbitMQ for user {user_in.username}")
    except Exception as e:
        print(f"Error while sending message to RabbitMQ: {e}")

    return schemas.UserResponse(id=user.id, username=user.username, email=user.email)




@router.post("/verify", description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ –∫–æ–¥—É –∏–∑ –ø–∏—Å—å–º–∞")
async def verify_email(data: EmailVerification, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(models.User).where(models.User.email == data.email))
    user = result.scalar_one_or_none()


    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if user.is_verified:
        return {"message": "Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"}

    print(f"üîç –∫–æ–¥ –≤ –±–∞–∑–µ: {user.verification_code}, –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data.code}")



    if user.verification_code != data.code:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    user.is_verified = True
    user.verification_code = None
    await db.commit()

    return {"message": "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"}


@router.post("/request-password-reset", description="–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è")
async def request_password_reset(data: PasswordResetRequest, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(models.User).where(models.User.email == data.email))
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if not user.is_verified:
        raise HTTPException(status_code=400, detail="Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
    code = str(random.randint(100000, 999999))
    user.verification_code = code
    await db.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ RabbitMQ
    try:
        await rabbit_broker.publish(
            {
                "username": user.username,
                "email": user.email,
                "code": code,
                "type": "password_reset"
            },
            routing_key="user.registered"
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")

    return {"message": "–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email"}


@router.post("/reset-password", description="–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ –∫–æ–¥—É")
async def reset_password(data: PasswordResetConfirm, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(models.User).where(models.User.email == data.email))
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if user.verification_code != data.code:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    user.hashed_password = get_password_hash(data.new_password)
    user.verification_code = None
    await db.commit()

    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω"}
