Обзор post_service

post_service — это микросервис, отвечающий за управление постами, комментариями, лайками и изображениями в системе. Он предоставляет RESTful API для создания, получения, обновления и удаления контента пользователей.

Этот микросервис является частью распределённой архитектуры и взаимодействует с другими сервисами (например, auth_service, subscription_service, admin_service) через API и, при необходимости, через брокер сообщений (RabbitMQ).

Основной функционал:
- Посты
  - Создание, просмотр, редактирование и удаление постов
  - Получение списка всех постов или постов конкретного пользователя

- Комментарии
  - Добавление комментариев к постам
  - Просмотр всех комментариев к конкретному посту
  - Редактирование и удаление комментариев

- Лайки
  - Возможность ставить и снимать лайки с постов и комментариев

- Изображения
  - Загрузка изображений к постам
  - Хранение изображений (в локальной папке)

Технологии:
- FastAPI — web-фреймворк для создания REST API
- SQLAlchemy — ORM для работы с базой данных
- PostgreSQL / SQLite — база данных (в зависимости от окружения)
- Pydantic — для валидации данных
- Alembic — для управления миграциями (если используется)
- Docker — контейнеризация сервиса (по желанию)

Установка и запуск:

1. Клонируйте репозиторий:

git clone https://github.com/Tatiana-Iuranova/Chatty_Microservices.git
cd Chatty_Microservices/post_service

2. Установите зависимости:

python -m venv venv
source venv/bin/activate  # Для Windows: venv\Scripts\activate
pip install -r requirements.txt

3. Настройте переменные окружения:
Создайте файл .env.local в корне post_service и добавьте необходимые параметры:

DB_HOST=post_db
DB_PORT=5432
DB_NAME=post_db
DB_USER=postgres
DB_PASSWORD=postgres
DEBUG=True

4. Запустите сервис:

uvicorn main:app --reload

Эндпоинты API:
post_service предоставляет следующие эндпоинты:

Посты:
Метод  |  URL            | Описание
---------------------------------------------------------
GET   | /posts/        | Получить список постов
GET   | /posts/{id}    | Получить пост по ID
POST  | /posts/        | Создать пост
PUT   | /posts/{id}    | Обновить пост
DELETE| /posts/{id}    | Удалить пост

Комментарии:
Метод  |  URL                       | Описание
---------------------------------------------------------
GET   | /comments/post/{post_id}   | Получить все комментарии к посту
GET   | /comments/{comment_id}     | Получить комментарий по ID
POST  | /comments/                 | Создать комментарий
PUT   | /comments/{comment_id}     | Обновить комментарий
DELETE| /comments/{comment_id}     | Удалить комментарий

Лайки:
Метод  |  URL                        | Описание
---------------------------------------------------------
POST  | /likes/                     | Поставить лайк посту или комментарию
GET   | /likes/post/{post_id}       | Получить количество лайков у поста
GET   | /likes/comment/{comment_id} | Получить количество лайков у комментария
DELETE| /likes/                     | Убрать лайк (по user_id и post_id/comment_id)

Медиа (изображения к постам):
Метод  |  URL                | Описание
---------------------------------------------------------
POST  | /media/upload      | Загрузить изображение и привязать к посту
GET   | /media/{filename}  | Получить изображение по имени файла
DELETE| /media/{filename}  | Удалить изображение (при удалении поста)

Завершение:
Теперь, когда вы настроили и запустили post_service, вы можете использовать его для управления постами, комментариями, лайками и изображениями в вашей системе.
"""

# Save the content to a .txt file
post_service_file_path = '/mnt/data/post_service_README.txt'

with open(post_service_file_path, 'w', encoding='utf-8') as f:
    f.write(post_service_readme_content)

post_service_file_path